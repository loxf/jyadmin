<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.loxf.jyadmin.dal.dao.AccountMapper" >
  <resultMap id="BaseResultMap" type="org.loxf.jyadmin.dal.po.Account" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="cust_id" property="custId" jdbcType="VARCHAR" />
    <result column="balance" property="balance" jdbcType="DECIMAL" />
    <result column="bp" property="bp" jdbcType="DECIMAL" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="is_lock" property="isLock" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, cust_id, balance, bp , password, is_lock, created_at, updated_at
  </sql>

  <select id="selectAccount" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tb_account
    where cust_id = #{custId,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByCustId" parameterType="java.lang.String" >
    delete from tb_account
    where cust_id = #{custId,jdbcType=VARCHAR}
  </delete>

  <insert id="insert" parameterType="org.loxf.jyadmin.dal.po.Account" >
    insert into tb_account ( cust_id, balance,
      bp, password, is_lock, created_at,
      updated_at)
    values ( #{custId,jdbcType=VARCHAR}, 0, 0, null, 0, now(), now())
  </insert>

  <select id="checkPassword">
    select count(1) from tb_account where cust_id = #{custId} and password = #{password}
  </select>

  <update id="lockAccount" parameterType="java.lang.String" >
    update tb_account set is_lock = 1 where cust_id = #{custId} and is_lock=0
  </update>

  <update id="unlockAccount" parameterType="java.lang.String" >
    update tb_account set is_lock = 0 where cust_id = #{custId} and  is_lock=1
  </update>

  <update id="updateBalanceOrBp" parameterType="org.loxf.jyadmin.dal.po.Account" >
    update tb_account
    <set >
      <if test="balance != null" >
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="bp != null" >
        bp = #{bp,jdbcType=DECIMAL},
      </if>
      is_lock = 0,
      updated_at = now()
    </set>
    where cust_id = #{custId,jdbcType=VARCHAR} and is_lock = 1
  </update>

  <update id="setPayPassword">
    update tb_account
    <set >
      password = #{password},
      updated_at = now()
    </set>
    where cust_id = #{custId}
  </update>

  <select id="selectBpTop10" resultType="java.util.HashMap">
    select nick_name, bp , @i := @i + 1 AS `order` from (
    SELECT
	b.nick_name, a.bp FROM tb_account a, tb_cust b
	WHERE a.cust_id = b.cust_id ORDER BY  a.bp DESC, b.id LIMIT 0, 10) cc,
	(SELECT @i := 0) AS it
  </select>

  <select id="queryBpRankingByCustId" resultType="int" parameterType="String">
    SELECT ranking FROM (
            SELECT cust_id, @i := @i + 1 AS ranking FROM
                tb_account, (SELECT @i := 0) AS it
            ORDER BY bp DESC) t
    WHERE cust_id = #{custId}
  </select>

  <select id="queryBalanceListCount" resultType="int" parameterType="org.loxf.jyadmin.dal.po.Cust">
    SELECT count(1)
    FROM TB_ACCOUNT A, tb_cust B
    WHERE A.cust_id = B.cust_id
    <include refid="WHERE_SQL"/>
  </select>

  <select id="queryBalanceList" resultType="com.alibaba.fastjson.JSONObject" parameterType="org.loxf.jyadmin.dal.po.Cust">
    SELECT A.CUST_ID as custId, A.BALANCE as balance, A.BP as bp, B.NICK_NAME as nickName, B.REAL_NAME as realName,
    B.USER_LEVEL as userLevel, B.PHONE as phone, B.EMAIL as email, B.IS_AGENT as isAgent
    FROM TB_ACCOUNT A, tb_cust B
    WHERE A.cust_id = B.cust_id
    <include refid="WHERE_SQL"/>
    order by a.id DESC
    <if test="pager!=null">
      limit #{pager.start}, #{pager.size}
    </if>
  </select>

  <sql id="WHERE_SQL">
    <if test="nickName!=null and nickName!=''">
      and (b.nick_name like CONCAT('%', #{nickName},'%') or b.real_name like CONCAT('%', #{nickName},'%'))
    </if>
    <if test="userLevel!=null and userLevel!=''">
      and b.user_level = #{userLevel}
    </if>
    <if test="phone!=null and phone!=''">
      and b.phone = #{phone}
    </if>
    <if test="email!=null and email!=''">
      and b.email = #{email}
    </if>
    <if test="isChinese!=null and isChinese!=-1">
      and b.is_chinese = #{isChinese}
    </if>
    <if test="isAgent!=null and isAgent!=-1">
      and b.is_agent = #{isAgent}
    </if>
  </sql>
</mapper>